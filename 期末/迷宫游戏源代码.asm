assume cs:code, ds:data, ss:stack
;迷宫图
data segment
    db 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
    db 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
    db 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1
    db 1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1
    db 1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1
    db 1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1
    db 1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1
    db 1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1
    db 1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1
    db 1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1
    db 1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1
    db 1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1
    db 1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1
    db 1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
    db 1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1
    db 1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,3,1
    db 1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1
    db 1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1
    db 1,1,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1
    db 1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1
    db 1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1
    db 1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1
    db 1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1
    db 1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1
    db 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
    db 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
data ends
stack segment
    dw 2000 dup(0)
stack ends
var segment
choice db 0
msg1   db "The Maze Game!", 0ah, 0dh, '$'
msg2   db "1.automatic movement 2.manual movement", 0ah, 0dh, '$'
msg3   db "Choose a mode:", '$'
msg4   db "1.automatic movement", 0ah, 0dh, '$'
msg5   db "2.manual movement", 0ah, 0dh, '$'
msg6   db "You win!", 0ah, 0dh, '$'
author db "By Mingze Zhao 2151974 at Tongji University, Shanghai", 0ah, 0dh, '$'
var ends
code segment
start:
    mov  ax, data
    mov  ds, ax
    mov  ax, stack
    mov  ss, ax
    mov  ax, 0b800h
    mov  es, ax
    mov  cx, 25
    mov  bx, 0
    mov  bp, 0
;;;;;;;;;;;;;;;;;;;;;
;打印提示语，选择模式
    call clear      ;清空屏幕
    mov  ax, var
    mov  ds, ax
    lea  dx, msg1   ;打印提示语
    mov  ah, 09h    ;将寄存器AH设置为09h，这是DOS的功能号，表示要执行字符串输出
    int  21h        ;触发DOS中断21h，以执行字符串输出操作，输出提示语
    lea  dx, author
    mov  ah, 09h
    int  21h
    lea  dx, msg2
    mov  ah, 09h
    int  21h
    lea  dx, msg3
    mov  ah, 09h
    int  21h
    mov  ah, 1
    int  21h        ;键入选择
    mov  choice, al ;暂存选择
;;;;;;;;;;;;;;;;;;;;;
;打印迷宫
    mov  ax, data
    mov  ds, ax
row:
    push cx
    mov  di, 0
    mov  si, 158
    mov  cx, 80     ;有80列
col:
    mov  al, ds:[bp]
    cmp  al, 0
    je   road       ;读到的是路
    mov  word ptr es:[bx+di], 3020h
    jmp  next
road:
    mov  word ptr es:[bx][di], 0
next:
    inc  bp
    add  di, 2
    sub  si, 2
    loop col
    add  bx, 160
    pop  cx
    loop row
;;;;;;;;;;;;;;;;;;;;;
;设置起点
;计算显存坐标:160*dh+2*dl
;计算矩阵坐标:80*dh+dl
    mov  word ptr es:[160*15+156], 0611h    ;打印起点
    mov  word ptr es:[160*11+156], 1241h    ;打印终点
    mov  dh, 15
    mov  dl, 78
    mov  di, 160*15+156
    mov  bp, 80*15+78
    mov  byte ptr ds:[bp], 2    ;走过的地方标记为2

    mov  ax, var
    mov  ds, ax
    mov  al, choice
    cmp  al, 032h       ;判断并跳转
    je   two
;;;;;;;;;;;;;;;;;;;;;
;自动挡
    mov  ax, data
    mov  ds, ax
    mov  cx, 2
loop_auto:
    call delay_time     ;调用延时函数
    call auto           ;调用自动处理
auto_end:
    inc  cx
    loop loop_auto

    jmp  finish         ;跳到程序结束
;;;;;;;;;;;;;;;;;;;;;
;手动挡
two:
    mov  ax, data
    mov  ds, ax
    mov  cx, 2
loop_manual:
    mov  es:[di], 061eh
    xor  ax, ax
    mov  ah, 7          ;无回显方式读键
    int  21h 
    cmp  al, 'w'        ;上
    je   shang
    cmp  al, 'a'        ;左
    je   zuo
    cmp  al, 's'        ;下
    je   xia
    cmp  al, 'd'        ;右
    je   you
;判断向上走可行性
shang:
    cmp  byte ptr ds:[bp-80], 1 ;墙
    je   manual_end             ;不处理
    mov  byte ptr ds:[bp], 2    ;走过的地方设置为2
    call shang_go               ;向上走
    jmp  manual_end             ;走完结束
;判断向左走可行性
zuo:
    cmp  byte ptr ds:[bp-1], 1
    je   manual_end
    mov  byte ptr ds:[bp], 2
    call zuo_go
    jmp  manual_end
;判断向下走可行性
xia:
    cmp  byte ptr ds:[bp+80], 1
    je   manual_end
    mov  byte ptr ds:[bp], 2
    call xia_go
    jmp  manual_end
;判断向右走可行性
you:
    cmp  byte ptr ds:[bp+1], 1
    je   manual_end
    mov  byte ptr ds:[bp], 2
    call you_go
    jmp  manual_end
;结束处理，无限循环
manual_end:
    inc  cx
    loop loop_manual
;程序结束
finish:  
    mov ax, 4c00h
    int 21h
;;;;;;;;;;;;;;;;;;;;;
;处理显存
;右箭头=16;左箭头=17;上箭头=30;下箭头=31;
;dh+dl=当前位置
shang_go:
    mov  word ptr es:[di], 061eh
    dec  dh
    sub  bp, 80
    sub  di, 160
    call judge      ;判赢
    ret
zuo_go:
    mov  word ptr es:[di], 0611h
    dec  dl
    sub  bp, 1
    sub  di, 2
    call judge
    ret
xia_go:
    mov  word ptr es:[di], 061fh
    inc  dh
    add  bp, 80
    add  di, 160
    call judge
    ret
you_go:
    mov  word ptr es:[di], 0610h
    inc  dl
    add  bp, 1
    add  di, 2
    call judge
    ret
;;;;;;;;;;;;;;;;;;;;;
;自动挡
auto:
    call judge  ;先判赢
    call check  ;检查下一步是不是进入终点
right:          ;右边有空地
    cmp  byte ptr ds:[bp+1], 0
    jne  up
    mov  byte ptr ds:[bp], 2    ;走过标记为2
    call you_go
    jmp  auto_end
up:             ;上边有空地
    cmp  byte ptr ds:[bp-80], 0
    jne  left
    mov  byte ptr ds:[bp], 2
    call shang_go
    jmp  auto_end
left:           ;左边有空地
    cmp  byte ptr ds:[bp-1], 0
    jne  down
    mov  byte ptr ds:[bp], 2
    call zuo_go
    jmp  auto_end
down:           ;下边有空地
    cmp  byte ptr ds:[bp+80], 0
    jne  right2
    mov  byte ptr ds:[bp], 2
    call xia_go
    jmp  auto_end
right2:         ;右边走过一次，可以回退
    cmp  byte ptr ds:[bp+1], 2
    jne  up2
    mov  byte ptr ds:[bp], 3    ;又走一次，标记为3
    call you_go
    jmp  auto_end
up2:            ;上边走过一次，可以回退
    cmp  byte ptr ds:[bp-80], 2
    jne  left2
    mov  byte ptr ds:[bp], 3
    call shang_go
    jmp  auto_end
left2:          ;左边走过一次，可以回退
    cmp  byte ptr ds:[bp-1], 2
    jne  down2
    mov  byte ptr ds:[bp], 3
    call zuo_go
    jmp  auto_end
down2:          ;下边走过一次，可以回退
    cmp  byte ptr ds:[bp+80], 2
    jne  call_finish    ;走入死胡同，直接退出
    mov  byte ptr ds:[bp], 3
    call xia_go
    jmp  auto_end
    ret
call_finish:
    call finish
    ret
;;;;;;;;;;;;;;;;;;;;;
;判断下一步是不是终点
check:
    cmp  byte ptr ds:[bp+1], 4  ;右边是终点
    jne  first
    call you_go
first:
    cmp  byte ptr ds:[bp-80], 4 ;上边是终点
    jne  second
    call shang_go
second:
    cmp  byte ptr ds:[bp-1], 4  ;左边是终点
    jne  third
    call zuo_go
third:
    cmp  byte ptr ds:[bp+80], 4 ;下边是终点
    jne  fourth
    call xia_go
fourth:
    ret
;;;;;;;;;;;;;;;;;;;;;
;判赢
judge:
    cmp  byte ptr ds:[bp], 4
    je   win
    ret
;;;;;;;;;;;;;;;;;;;;;
;赢了
win:
    call clear
    mov  ax, var
    mov  ds, ax
    lea  dx, msg6
    mov  ah, 09h    ;将寄存器AH设置为09h，这是DOS的功能号，表示要执行字符串输出
    int  21h        ;触发DOS中断21h，以执行字符串输出操作，输出提示语
    jmp  finish
    ret
;;;;;;;;;;;;;;;;;;;;;
;清空屏幕
clear:
    mov  al, 3h
    mov  ah, 0h
    int  10h
    ret
;;;;;;;;;;;;;;;;;;;;;
;延时函数
delay_time:
    push cx
    mov  cx, 00ffh
dn1:
    push cx
    mov  cx, 00ffh 
dn2:
    loop dn2
    pop  cx 
    loop dn1
    pop  cx
    ret
code ends
    end start